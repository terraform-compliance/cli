name: CD
on:
#  release:
#    types: [created]
 push:
  branches:
    - 1.3.7

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: '3.6'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements_dev.txt

      - name: Run unit tests
        run: |
          pytest tests/terraform_compliance

      - name: Build & Test & Publish to PyPI
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USER }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          python setup.py sdist bdist_wheel
          pip install dist/terraform_compliance-${{ steps.strip-tag.outputs.tag }}-*.whl
          sleep 5
          python tests/functional/run_functional_tests.py
          twine upload dist/*

      - name: Publish to Docker Hub
        env:
          IMAGE_NAME: 'eerkunt/terraform-compliance'
          DOCKER_HUB_USER: ${{ secrets.DOCKER_HUB_USER }}
          DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}
        run : |
          sleep 15
          echo "Getting the latest terraform version from Hashicorp"
          echo "export LATEST_TERRAFORM_VERSION=$(curl https://checkpoint-api.hashicorp.com/v1/check/terraform | jq -r .current_version)" > terraform_version.sh
          source terraform_version.sh
          if [ -z "$LATEST_TERRAFORM_VERSION" ]; then echo "Can not identify latest terraform version!"; travis_terminate 1; fi
                                                docker build --compress --no-cache -t "$IMAGE_NAME" --build-arg VERSION=$RELEASE_VERSION --build-arg LATEST_TERRAFORM_VERSION=$LATEST_TERRAFORM_VERSION --build-arg HASHICORP_PGP_KEY="$(cat hashicorp-pgp-key.pub)" . || travis_terminate 1
          docker login -u "$DOCKER_HUB_USER" -p "$DOCKER_HUB_PASSWORD"
          docker tag "$IMAGE_NAME" $IMAGE_NAME:latest
          docker tag "$IMAGE_NAME" "$IMAGE_NAME":"$RELEASE_VERSION"
          docker push "$IMAGE_NAME":latest
          docker push "$IMAGE_NAME":"$RELEASE_VERSION"
